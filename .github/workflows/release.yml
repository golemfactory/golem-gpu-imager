name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Install cargo-zigbuild
        run: cargo install cargo-zigbuild

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.0

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Linux
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo build --target ${{ matrix.target }} --release

      - name: Build Windows
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: cargo zigbuild --target ${{ matrix.target }} --release

      - name: Create artifact directory
        run: mkdir -p artifacts

      - name: Copy Linux binary
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: cp target/${{ matrix.target }}/release/golem-gpu-imager artifacts/golem-gpu-imager-linux

      - name: Copy Windows binary
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: cp target/${{ matrix.target }}/release/golem-gpu-imager.exe artifacts/golem-gpu-imager-windows.exe

      - name: Create archives
        run: |
          cd artifacts
          if [ -f golem-gpu-imager-linux ]; then
            tar -czf golem-gpu-imager-linux.tar.gz golem-gpu-imager-linux
            zip golem-gpu-imager-linux.zip golem-gpu-imager-linux
          fi
          if [ -f golem-gpu-imager-windows.exe ]; then
            tar -czf golem-gpu-imager-windows.tar.gz golem-gpu-imager-windows.exe
            zip golem-gpu-imager-windows.zip golem-gpu-imager-windows.exe
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: golem-gpu-imager-${{ matrix.target }}
          path: artifacts/*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            golem-gpu-imager-x86_64-unknown-linux-gnu/golem-gpu-imager-linux
            golem-gpu-imager-x86_64-unknown-linux-gnu/golem-gpu-imager-linux.tar.gz
            golem-gpu-imager-x86_64-unknown-linux-gnu/golem-gpu-imager-linux.zip
            golem-gpu-imager-x86_64-pc-windows-gnu/golem-gpu-imager-windows.exe
            golem-gpu-imager-x86_64-pc-windows-gnu/golem-gpu-imager-windows.tar.gz
            golem-gpu-imager-x86_64-pc-windows-gnu/golem-gpu-imager-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}