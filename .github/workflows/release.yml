name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  ZIG_VERSION: '0.14.0'

jobs:
  build:
    name: Build Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Cache system packages for Windows cross-compilation
      - name: Cache mingw packages
        if: matrix.target == 'x86_64-pc-windows-gnu'
        id: cache-mingw
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-mingw-packages-v1

      - name: Install cross-compilation dependencies
        if: matrix.target == 'x86_64-pc-windows-gnu' && steps.cache-mingw.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      # Cache Cargo tools
      - name: Cache cargo tools
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-tools-zigbuild-v2
          restore-keys: |
            ${{ runner.os }}-cargo-tools-

      # Cache cargo-binstall for faster tool installation
      - name: Cache cargo-binstall
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-binstall
          key: ${{ runner.os }}-cargo-binstall-v1

      - name: Install cargo-binstall
        run: |
          if ! command -v cargo-binstall &> /dev/null; then
            curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
          fi

      - name: Install cargo-zigbuild
        run: |
          if ! command -v cargo-zigbuild &> /dev/null; then
            cargo binstall --no-confirm cargo-zigbuild
          fi

      # Cache Zig installation
      - name: Cache Zig
        uses: actions/cache@v4
        with:
          path: ~/.local/share/zig
          key: ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      # Cargo caches with better keys
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry/index
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo git
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('src/**') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-

      - name: Build for ${{ matrix.target }}
        run: |
          if [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]]; then
            cargo zigbuild --target ${{ matrix.target }} --release
          else
            cargo build --target ${{ matrix.target }} --release
          fi

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts
          
          # Determine binary name and extension
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            BINARY_NAME="golem-gpu-imager.exe"
            ARTIFACT_NAME="golem-gpu-imager-windows.exe"
          else
            BINARY_NAME="golem-gpu-imager"
            ARTIFACT_NAME="golem-gpu-imager-linux"
          fi
          
          # Copy binary
          cp "target/${{ matrix.target }}/release/${BINARY_NAME}" "artifacts/${ARTIFACT_NAME}"
          
          # Create archives
          cd artifacts
          tar -czf "${ARTIFACT_NAME}.tar.gz" "${ARTIFACT_NAME}"
          zip "${ARTIFACT_NAME}.zip" "${ARTIFACT_NAME}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: golem-gpu-imager-${{ matrix.target }}
          path: artifacts/*
          compression-level: 0  # Files are already compressed

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            golem-gpu-imager-x86_64-unknown-linux-gnu/golem-gpu-imager-linux
            golem-gpu-imager-x86_64-unknown-linux-gnu/golem-gpu-imager-linux.tar.gz
            golem-gpu-imager-x86_64-unknown-linux-gnu/golem-gpu-imager-linux.zip
            golem-gpu-imager-x86_64-pc-windows-gnu/golem-gpu-imager-windows.exe
            golem-gpu-imager-x86_64-pc-windows-gnu/golem-gpu-imager-windows.tar.gz
            golem-gpu-imager-x86_64-pc-windows-gnu/golem-gpu-imager-windows.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
